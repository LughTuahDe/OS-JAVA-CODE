import java.util.*;

public class PriorityPreemptive {
    public static void main(String[] args) {
        int[][] processList = {{0, 5, 2, 1}, {1, 3, 1, 2}, {2, 4, 3, 3}, {4, 1, 4, 4}}; // {AT, BT, Priority, ID}
        priorityPreemptive(processList);
    }

    static void priorityPreemptive(int[][] processList) {
        Arrays.sort(processList, Comparator.comparingInt(a -> a[0]));
        PriorityQueue<int[]> readyQueue = new PriorityQueue<>(Comparator.comparingInt(a -> a[2]));
        Map<Integer, int[]> completed = new LinkedHashMap<>();
        StringBuilder ganttChart = new StringBuilder("Gantt Chart: ");
        int[] remainingBurst = Arrays.stream(processList).mapToInt(p -> p[1]).toArray();
        int time = 0, totalWT = 0, totalTT = 0, index = 0, processes = processList.length;

        while (completed.size() < processes) {
            while (index < processes && processList[index][0] <= time)
                readyQueue.add(processList[index++]);

            if (readyQueue.isEmpty()) {
                ganttChart.append("Idle ");
                time++;
                continue;
            }

            int[] process = readyQueue.poll();
            ganttChart.append("P").append(process[3]).append(" ");
            time++;
            remainingBurst[process[3] - 1]--;

            if (remainingBurst[process[3] - 1] == 0) {
                int tt = time - process[0], wt = tt - process[1];
                totalWT += wt;
                totalTT += tt;
                completed.put(process[3], new int[]{time, tt, wt});
            } else {
                readyQueue.add(new int[]{process[0], remainingBurst[process[3] - 1], process[2], process[3]});
            }
        }

        printResults(ganttChart, completed, processes, totalTT, totalWT);
    }
}
