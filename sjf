import java.util.*;

public class SJF {
    public static void main(String[] args) {
        int[][] processList = {{0, 5, 1}, {1, 3, 2}, {2, 4, 3}, {4, 1, 4}};
        sjf(processList);
    }

    static void sjf(int[][] processList) {
        Arrays.sort(processList, Comparator.comparingInt(a -> a[0])); // Sort by arrival time
        PriorityQueue<int[]> readyQueue = new PriorityQueue<>(Comparator.comparingInt(a -> a[1])); // Shortest job first
        Map<Integer, int[]> completed = new LinkedHashMap<>();
        StringBuilder ganttChart = new StringBuilder("Gantt Chart: ");
        int time = 0, totalWT = 0, totalTT = 0, index = 0;

        while (!readyQueue.isEmpty() || index < processList.length) {
            while (index < processList.length && processList[index][0] <= time)
                readyQueue.add(processList[index++]);

            if (readyQueue.isEmpty()) {
                ganttChart.append("Idle ");
                time++;
                continue;
            }

            int[] process = readyQueue.poll();
            ganttChart.append("P").append(process[2]).append(" ");
            time += process[1];
            int tt = time - process[0], wt = tt - process[1];
            totalWT += wt;
            totalTT += tt;
            completed.put(process[2], new int[]{time, tt, wt});
        }

        System.out.println(ganttChart);
        System.out.println("\nProcess ID | Completion Time | Turnaround Time | Waiting Time");
        completed.forEach((id, metrics) -> System.out.printf("    P%d     |        %d       |        %d       |      %d%n",
                id, metrics[0], metrics[1], metrics[2]));
        
        System.out.printf("\nAverage Turnaround Time: %.2f%n", totalTT / (double) processList.length);
        System.out.printf("Average Waiting Time: %.2f%n", totalWT / (double) processList.length);
    }
}
